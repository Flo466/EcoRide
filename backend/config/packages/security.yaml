# config/packages/security.yaml
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            # It's recommended to use a list for 'custom_authenticators' even if there's only one
            custom_authenticators:
                - App\Security\ApiTokenAuthenticator

            stateless: true

            # Activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # -------------------------------------------------------------
        # Place specific PUBLIC_ACCESS rules first
        # -------------------------------------------------------------
        - { path: ^/api/registration, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        
        # Public access for GET requests on carpooling routes
        - { path: ^/api/carpooling, roles: PUBLIC_ACCESS, methods: [GET] }
        # Public access for GET requests on review routes
        - { path: ^/api/review, roles: PUBLIC_ACCESS, methods: [GET] }

        # -------------------------------------------------------------
        # Next, rules that require authentication
        # (these should be specific if you have exceptions)
        # -------------------------------------------------------------
        # Authentication required for POST/PUT/DELETE on carpooling routes
        - { path: ^/api/carpooling, roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, DELETE] }
        # Authentication required for POST/PUT/DELETE on review routes
        - { path: ^/api/review, roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, DELETE] }
        
        # Authentication required for all car (Car) routes
        - { path: ^/api/car, roles: IS_AUTHENTICATED_FULLY }
        
        # Finally, the generic rule for the rest of the API that requires IS_AUTHENTICATED_FULLY
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
        firewalls:
            main:
                lazy: true
                provider: app_user_provider
                custom_authenticators:
                    - App\Security\ApiTokenAuthenticator
                stateless: true